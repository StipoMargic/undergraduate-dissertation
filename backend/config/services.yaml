# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Infrastructure\UI\HTTP\Web\v1\Endpoint\:
    resource: '../src/Infrastructure/UI/HTTP/Web/v1/Endpoint/*'
    tags: [ 'controller.service_arguments' ]

  App\Infrastructure\UI\HTTP\Web\v1\ApiResponder\:
    resource: '../src/Infrastructure/UI/HTTP/Web/v1/ApiResponder/*'

  # Application services - Category & Query handlers and Bus configuration
  App\Application\Service\:
    resource: '../src/Application/Service/*'
    exclude: '../src/Application/Service/{CommandHandler}'

  App\Infrastructure\Service\:
    resource: '../src/Infrastructure/Service/*'
    exclude: '../src/Infrastructure/Service/{QueryHandler}'

  App\Application\Service\CommandHandler\:
    resource: '../src/Application/Service/CommandHandler/*'
    autoconfigure: false
    tags:
      - { name: messenger.message_handler, bus: command.bus }

  App\Infrastructure\Service\QueryHandler\:
    resource: '../src/Infrastructure/Service/QueryHandler/*'
    autoconfigure: false
    tags:
      - { name: messenger.message_handler, bus: query.bus }

  App\Application\Service\Bus\QueryBus:
    alias: App\Infrastructure\Service\Bus\MessengerQueryBus

  App\Application\Service\Bus\CommandBus:
    alias: App\Infrastructure\Service\Bus\MessengerCommandBus

  # Buses
  App\Infrastructure\Service\Bus\:
    resource: '../src/Infrastructure/Service/Bus/*'

  App\Infrastructure\UI\Console\:
    resource: '../src/Infrastructure/UI/Console/*'

  App\Infrastructure\ParamConverter\UuidConverter: ~

  # Repositories
  App\Infrastructure\Persistence\Doctrine\Repository\:
    resource: '../src/Infrastructure/Persistence/Doctrine/Repository/*'

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones


  App\Application\User\UserRepository\UserReadRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineUserReadRepository'
  App\Application\User\UserRepository\UserWriteRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineUserWriteRepository'
  App\Application\Portfolio\PortfolioRepository\PortfolioReadRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrinePortfolioReadRepository'
  App\Application\Portfolio\PortfolioRepository\PortfolioWriteRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrinePortfolioWriteRepository'
  App\Application\Category\CategoryRepository\CategoryReadRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineCategoryReadRepository'
  App\Application\Category\CategoryRepository\CategoryWriteRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineCategoryWriteRepository'
  App\Application\Qualification\QualificationRepository\QualificationReadRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineQualificationReadRepository'
  App\Application\Qualification\QualificationRepository\QualificationWriteRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineQualificationWriteRepository'
  App\Application\Experience\ExperienceRepository\ExperienceReadRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineExperienceReadRepository'
  App\Application\Experience\ExperienceRepository\ExperienceWriteRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineExperienceWriteRepository'
  App\Application\Job\JobRepository\JobReadRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineJobReadRepository'
  App\Application\Job\JobRepository\JobWriteRepository: '@App\Infrastructure\Persistence\Doctrine\Repository\DoctrineJobWriteRepository'

  # Additional config

  App\Infrastructure\Security\Voter\:
    resource: '../src/Infrastructure/Security/Voter/*'
    tags: [ 'security.voter' ]

  App\Infrastructure\Image\Upload\ImageUploader:
    arguments:
      $targetDirectory: "%kernel.project_dir%/public/images/"

  app.jwt_token_authenticator:
    class: App\Infrastructure\Security\Guard\JWTTokenAuthenticator
    parent: lexik_jwt_authentication.security.guard.jwt_token_authenticator

  app.user_checker:
    class: App\Infrastructure\Security\UserChecker

  App\Infrastructure\Service\EventHandler\CreateNewPortfolioEventHandler:
    tags:
      - name: 'doctrine.event_listener'
        event: 'prePersist'
        priority: 500

  App\Infrastructure\Service\EventHandler\CreateNewJobEventHandler:
    tags:
      - name: 'doctrine.event_listener'
        event: 'prePersist'
        priority: 500